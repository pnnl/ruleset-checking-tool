# zone_meets_G3_1_1c

**Schema Version:** 0.0.21

**Description:** determines whether a given zone meets the G3_1_1c exception "If the baseline HVAC system type is 5, 6, 7, 8, 9, 10, 11, 12, or 13 use separate single-zone systems conforming with the requirements of system 3 or system 4 (depending on building heating source) for any spaces that have occupancy or process loads or schedules that differ significantly from the rest of the building. Peak thermal loads that differ by 10 Btu/hÂ·ft2 (2.930710 W/sf) or more from the average of other spaces served by the system, or schedules that differ by more than 40 equivalent full-load hours per week from other spaces served by the system, are considered to differ significantly. Examples where this exception may be applicable include but are not limited to natatoriums and continually occupied security areas. This exception does not apply to computer rooms."
"average" is not particularly well defined in this exception. 
for the peak W/sf calculation I've assumed:
	1. the zone being tested is not included
 	2. the average: (each space coincident peak W) / total_area

**Inputs:** 
- **RMR**
- **zone**

**Returns:**  
- **result**: a string - either "C" or "No"
 
**Function Call:**
- **get_baseline_system_types**
- **get_zone_peak_internal_load**

## Logic:
- set the result variable to "No" - only a positive test can give it a different value: `result = "No"`
- get the building_segment the zone is in:
`for building_segmentin RMR.building.buildings:`
	- check if the zone is in the building_segment:
	`if zone in building_segment.zones:`
		- break - this means the variable "building_segment" is the building_segment that contains the zone:
		`break`
- make a list of the heating_ventilation_air_conditioning_systems in the building_segment:
`relevant_systems = [a.id for a in building_segment.heating_ventilation_air_conditioning_systems]`



- first check if the system type is one of the following:
`eligible_primary_system_types = ["SYS-5","SYS-5b","Sys-6","Sys-6b","Sys-7","Sys-7a","Sys-7b","Sys-7c","Sys-8","Sys-8a","Sys-8b","Sys-8c","Sys-8d","Sys-9","Sys-9b","Sys-10","Sys-11.1","Sys-11.1a","Sys-11b","Sys-11c","Sys-12","Sys-12a","Sys-12b","Sys-12c","Sys-13","Sys-13a"]`
- get the dict of get_baseline_system_types:
`system_types_b = get_baseline_system_types(RMR)`
- create a sub-list of system_types_b that includes only the system types and id references in the building_segment:
`segment_system_types_b = {key: system_types_b[0] for key in system_types_b if(len(set(system_types_b[key])&set(relevant_systems)) > 0)`

- create set of system types that are eligible for this rule AND included:
`eligible_systems_in_RMR = (set(segment_system_types_b) & set(eligible_primary_system_types))`
- check if any of the eligible_primary_system_types is in the system_types_b:
`if((len(eligible_systems_in_RMR)) > 0):`
	- create a variable to hold the sum total of all peak loads in the system:
	`system_total_peak_load = 0`
	- create a variable to hold the sum total of the system area:
	`system_total_area = 0`
	- create a list of the EFLH's for each zone `eflh = []`
	- look through all zones in the building segment:
	`for zone_b in building_segment.zones:`
		- check that zone_b is not the zone being investigated:
		`if zone_b != zone:`
			- add the zone internal loads to the system_total_peaks:
			`a = get_zone_peak_internal_load(zone_b)`
			`system_total_peak += a[0]`
			`system_total_area += a[1]`
			- add the eflh to the eflh list.  We are multiplying the schedule by the zone area so that later we can divide the total by the total area.  Otherwise small zones with very different schedules have too great an impact
			`eflh.append(a[2] * a[1])`
	- now calculate the average internal load: `avg_internal_load = system_total_peak / system_total_area`
	- and calculate the averge eflh: `avg_eflh = sum(eflh)/len(eflh)`
	- get the internal load of the reference zone: `internal_loads = get_zone_peak_internal_load(zone)`
	- now do the rule checks:
	- if the zone peak differs by more than 2.930710 W/sf from the average, then it meets the exception:
	`if(abs(internal_loads[0]/internal_loads[1] - avg_internal_load) > 2.930710):
		- it meets the exception: `result = "C"`
	- OR if the eflh differs by more than 40, then the zone meets this exception:
	`if(abs(internal_loads[2] - eflh) > 40):
		- it meets the exception: `result = "C"`

**Returns** `result`

**[Back](../_toc.md)**
